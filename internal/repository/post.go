package repository

import (
	"myapp/internal/model"

	"gorm.io/gorm"
)

type PostRepository interface {
	Create(post *model.Post) error
	GetByID(id int64) (*model.Post, error)
	GetAll() ([]model.Post, error)
	Delete(id int64) error
	GetByUserIDs(ids []int64) ([]model.Post, error) // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏
}

type postRepository struct{ db *gorm.DB }

func NewPostRepository(db *gorm.DB) PostRepository {
	return &postRepository{db: db}
}

// ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
func (r *postRepository) Create(post *model.Post) error {
	return r.db.Create(post).Error
}

// üîç –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
func (r *postRepository) GetByID(id int64) (*model.Post, error) {
	var p model.Post
	if err := r.db.First(&p, id).Error; err != nil {
		return nil, err
	}
	return &p, nil
}

// üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
func (r *postRepository) Delete(id int64) error {
	return r.db.Delete(&model.Post{}, id).Error
}

// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
func (r *postRepository) GetAll() ([]model.Post, error) {
	var posts []model.Post
	if err := r.db.Order("created_at DESC").Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (r *postRepository) GetByUserIDs(ids []int64) ([]model.Post, error) {
	var posts []model.Post
	if err := r.db.Where("user_id IN ?", ids).
		Order("created_at DESC").
		Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}
